<?xml version="1.0" encoding="UTF-8" ?>
<root>
	<java>
		<name>Basics</name>
		<floors>
			<lesson>Lets learn one of the most essential aspects of Java: how to print!
</lesson>
			<description>Type in 'System.out.print();' with the words Hello World! in between quotes in between the two parentheses. Then click Execute.</description>
			<hints>To print 'Hey!' we type 'System.out.print("Hey");</hints>
			<baseCode>public class Solution{
 	public static void main(String[] args){
 		//Your code goes under here
	}
}</baseCode>
			<expectedOutputs>Hello World!</expectedOutputs>
		</floors>
		<floors>
			<lesson>Theres also another type of print: System.out.println(). While System.out.print() prints the input on the same line, System.out.println() prints the given input and moves to a new line so that any new input will begin in the next line. Lets try it out! 
</lesson>
			<description>Type in 'System.out.println();' with the word 'Hello!', and then 'System.out.println();' with the word 'World!.</description>
			<hints>To print 'Hey!' followed by a newline we type 'System.out.println("Hey!");</hints>
			<baseCode>public class Solution{
 	public static void main(String[] args){
 		//Your code goes under here
	}
}</baseCode>
			<expectedOutputs>Hello!
World!
</expectedOutputs>
		</floors>
		<floors>
			<lesson>In any programming language, a variable is used to hold values for later use. For example, the statement 'String x = "Hello";' stores the text 'Hello' as x in your program, which can then be used in subsequent code. Lets use our knowledge from the previous tasks to print out a String Variable! 
</lesson>
			<description>Print the variable called str.</description>
			<hints>Printing a variable is just like how we printed "Hello World", but without quotations.</hints>
			<baseCode>import java.util.*;
public class Solution{
	public static void main(String[] args){
		Scanner sc = new Scanner(System.in);
		while(sc.hasNextLine()){
			String line = sc.nextLine();
			printVariable(line);
		}
	}
	public static void printVariable(String str){
		//Your code goes here
	}
}</baseCode>
			<expectedOutputs>Hello Codelot!</expectedOutputs>
			<testCases>["Hello Codelot!"]</testCases>
		</floors>
		<floors>
			<lesson>Integer is another variable like String which, instead of storing text, is used to keep integer values. For example, The assignment 'int x = 5' creates a variable x with the value 5. Integers are numbers and you can therefore perform mathematical operations on them. Taking our previously declared variable x, we can add 5 to x and store the result within a new Integer variable like so: 'int y = x + 5;'. The value of y is now 10 as x was declared with a value of 5.</lesson>
			<description>Create a new variable equal to the difference between a and b and print the variable.</description>
			<hints>You can store the difference between a and b in a new variable similar to how we created y in the lesson description and print it out exactly like we printed a string variable in floor 3.</hints>
			<baseCode>import java.util.*;
 public class Solution{
	public static void main(String[] args){
		Scanner sc = new Scanner(System.in);
		while(sc.hasNextLine()){
			String line = sc.nextLine();
			String[] nums = line.split(",");
			int a = Integer.parseInt(nums[0]);
			int b = Integer.parseInt(nums[1]);
			addTwoNums(a, b);
		}
	}
	public static void addTwoNums(int a, int b){
		//Your code goes under here
	}
}</baseCode>
			<expectedOutputs>5</expectedOutputs>
			<testCases>["10,5"]</testCases>
		</floors>
	</java>
	<java>
		<name>Conditionals</name>
		<floors>
			<lesson>Conditional statements are used to execute different code based on whether a given expression evaluates to true or false. A boolean variable may be used to express true or false. You may do so by setting a variable using the following format: 

	boolean myBoolean = true; 

 You can construct an if statement by using the following syntax. The code within the 'if' block will execute if myBoolean is true. The code within the 'else' block will run if myBoolean is false. 

	if (myBoolean) {
		// your code
	}
	else {
		// other code
	}</lesson>
			<description>Write a program that prints "myBoolean is true" if myBoolean is true and prints "myBoolean is false" otherwise.</description>
			<hints>To print "myBoolean is true" we type 'System.out.println("myBoolean is true");</hints>
			<baseCode>public class Solution{
 	public static void main(String[] args){
 		myConditional(true);
		myConditional(false);
	}
	public static void myConditional(boolean myBoolean) {
		//Your code here
	}
}</baseCode>
			<expectedOutputs>myBoolean is true
myBoolean is false
</expectedOutputs>
		</floors>
		<floors>
			<lesson>Along with 'if' and 'else' statements, there is also the 'else if' statement. Using these statements, there are more possibilities to branch code off of than simple true or false.
Relational operators to be used in an expression include the following: less than (<), greater than (>), less than or equal to (<=), greater than or equal to (>=), equals (==), or not equals (!=)
			</lesson>
			<description>Write a program that prints "x is less than 5" if x is less than 5, prints "x is greater than 10" if x is greater than 10, and prints "x is between 5 and 10" otherwise.</description>
			<hints>Use if, else if, and else to test for different cases!</hints>
			<hints>Remember the relational operators that may be useful in this problem, such as "<"
			</hints>
			<baseCode>public class Solution{
 	public static void main(String[] args){
 		myConditional(1);
		myConditional(11);
		myConditional(5);
	}
	public static void myConditional(int x) {
		//Your code here
	}
}</baseCode>
			<expectedOutputs>x is less than 5
x is greater than 10
x is between 5 and 10
</expectedOutputs>
		</floors>
		<floors>
			<lesson>In order to print the value of a variable as part of a string, you may use string concatenation. To print "x equals " followed by the value of x, the following code is used:
	 System.out.print("x equals " + x) </lesson>
			<description>Write a program that prints "5 is greater than " followed by the value of x when 5 is greater than x, otherwise print "x is equal to " followed by the value of x.</description>
			<hints>Use if and else to test for different cases!</hints>
			<hints>Remember the relational operators that may be useful in this problem, such as ">"</hints>
			<baseCode>public class Solution{
 	public static void main(String[] args){
 		myConditional(1);
		myConditional(11);
		myConditional(5);
	}
	public static void myConditional(int x) {
		//Your code here
	}
}</baseCode>
			<expectedOutputs>5 is greater than 1
x is equal to 11
x is equal to 5
</expectedOutputs>
		</floors>
	</java>
	<java>
		<name>Loops</name>
		<floors>
			<lesson>While loops are used to execute code numerous times while a given expression or value evaluates to true. You can construct a while statement by using the following syntax. The code within the 'while' block will execute so long as myBoolean is true. 

	while (myBoolean) {
		// your code
	}. 
It is very important to be careful when using loops, as infinitely executing loops will likely cause problems for a program. As such, it is important to make sure that any variables within a while statement are being updated as needed within the while block.</lesson>
			<description>Using a while loop, write a program that prints "x is " followed by the value of x and a new line for all values from 0 to 4</description>
			<hints>To run the loop for all necessary values, start x at 0 and continue the loop so long as x is less than or equal to 4.</hints>
			<hints>Remember to update x from within the loop by adding 1 each time at the end.</hints>
			<baseCode>public class Solution{
 	public static void main(String[] args){
 		// Your Code Here
	}
}</baseCode>
			<expectedOutputs>x is 0
x is 1
x is 2
x is 3
x is 4
</expectedOutputs>
		</floors>
		<floors>
			<lesson>For loops are used to execute code for a number of times while a temporary variable is within a certain range. You can construct a for statement by using the following syntax. The code within the 'for' block will execute so long as the variable defined within the statement evaluates to true based on the given expression. The third expression of the for statement updates the variable after each iteration. 

	for (int i = 0; i < 10; i = i + 1) {
		// your code
	}.
			</lesson>
			<description>Using a for loop, write a program that prints "x is " followed by the value of x and a new line for all values from 7 to 12</description>
			<hints>To run the loop for all necessary values, start x at 7 and continue the loop so long as x is less than or equal to 12.</hints>
			<baseCode>public class Solution{
 	public static void main(String[] args){
 		// Your Code Here
	}
}</baseCode>
			<expectedOutputs>x is 7
x is 8
x is 9
x is 10
x is 11
x is 12
</expectedOutputs>
		</floors>
		<floors>
			<lesson>An array is a list of variables of fixed length. For example, a list of ten integers can be defined with the following code:
	int a[] = new int[10];
To access a value in the list, the indexes begin counting at 0 and continue to the length of the list minus 1. As such, the first element of array a is a[0] and the last element is a[9]. To get the length of an array, use a.length to get the value 10.</lesson>
			<description>Write a program that prints every element in the integer array a, separated by a new line.</description>
			<hints>Remember that the indices of array a begin with 0 and end with a.length-1.</hints>
			<hints>You can use a variable to hold the index of the element that you would like to access in array a.</hints>
			<baseCode>public class Solution{
 	public static void main(String[] args){
 		int[] a = {1,2,3,4};
		printArray(a);
		int[] b = {6,8,9,2,1};
		printArray(b);
	}
	public static void printArray(int[] a) {
		//Your code here
	}
}</baseCode>
			<expectedOutputs>1
2
3
4
6
8
9
2
1
</expectedOutputs>
		</floors>
		<floors>
			<lesson>You can define a variable outside of a loop in order to use it and update the value during subsequent executions of the code. In this example, you will need to keep a running sum of each value in an array.</lesson>
			<description>Write a program that prints "The total is " followed by the total of the values within an integer array.</description>
			<hints>Remember that the indices of array a begin with 0 and end with a.length-1.</hints>
			<hints>You can use a variable to hold the index of the element that you would like to access in array a.</hints>
			<hints>You can use a variable to hold the total as you go through every element in array a.</hints>
			<baseCode>public class Solution{
 	public static void main(String[] args){
 		int[] a = {0,1,2,3,4};
		addArray(a);
		int[] b = {6,8,9,2,1};
		addArray(b);
	}
	public static void addArray(int[] a) {
		//Your code here
	}
}</baseCode>
			<expectedOutputs>The total is 10
The total is 26
</expectedOutputs>
		</floors>
	</java>
</root>